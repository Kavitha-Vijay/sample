using NUnit.Framework;
using System;
using System.Diagnostics;
using Newtonsoft.Json;

[TestFixture]
public class MyTests
{
    private static TestResults testResults = new TestResults(); // Initialize the TestResults object
    private Stopwatch stopwatch;

    [SetUp]
    public void SetUp()
    {
        stopwatch = Stopwatch.StartNew();
    }

    [TearDown]
    public void TearDown()
    {
        stopwatch.Stop();

        string testName = TestContext.CurrentContext.Test.Name;
        string status = TestContext.CurrentContext.Result.Outcome.Status.ToString();
        string duration = stopwatch.ElapsedMilliseconds.ToString();

        // Update test results
        UpdateTestResults("/module", "package", "ClassName", testName, duration, status, DateTime.UtcNow.ToString("yyyyMMddHHmmssfff"), null);

        // Serialize updated JSON
        string updatedJson = JsonConvert.SerializeObject(testResults, Newtonsoft.Json.Formatting.Indented);
        Console.WriteLine("Updated JSON:");
        Console.WriteLine(updatedJson);

        // Optionally convert JSON to XML
        string updatedXml = ConvertJsonToXml(updatedJson);
        Console.WriteLine("Updated XML:");
        Console.WriteLine(updatedXml);
    }

    [Test]
    public void Test1()
    {
        // Your test code here
        Assert.Pass();
    }

    [Test]
    public void Test2()
    {
        // Your test code here
        Assert.Fail("This is a failure message.");
    }

    public static void UpdateTestResults(string module, string package, string testClass, string testCase, string duration, string status, string started, Error error)
    {
        testResults.TestRuns.Add(new TestRun
        {
            Module = module,
            Package = package,
            Class = testClass,
            Name = testCase,
            Duration = duration,
            Status = status,
            Started = started,
            Error = error
        });
    }

    public static string ConvertJsonToXml(string json)
    {
        XmlDocument doc = JsonConvert.DeserializeXmlNode(json, "test_result");

        // Remove optional nodes if they are empty
        RemoveEmptyNodes(doc, "backlog_items");
        RemoveEmptyNodes(doc, "test_fields");
        RemoveEmptyNodes(doc, "environment");

        // Remove the XML declaration
        XmlWriterSettings settings = new XmlWriterSettings
        {
            OmitXmlDeclaration = true,
            Indent = true
        };

        using (StringWriter stringWriter = new StringWriter())
        using (XmlWriter xmlWriter = XmlWriter.Create(stringWriter, settings))
        {
            doc.WriteTo(xmlWriter);
            xmlWriter.Flush();
            return stringWriter.GetStringBuilder().ToString();
        }
    }

    private static void RemoveEmptyNodes(XmlDocument doc, string nodeName)
    {
        XmlNode node = doc.SelectSingleNode($"//{nodeName}");
        if (node != null && !node.HasChildNodes)
        {
            node.ParentNode.RemoveChild(node);
        }
    }
}
