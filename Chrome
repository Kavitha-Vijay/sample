
import java.io.*;
import java.net.HttpURLConnection;
import java.net.URL;
import java.nio.file.*;
import java.util.zip.ZipEntry;
import java.util.zip.ZipInputStream;

public class ChromeDriverDownloader {

    public static void main(String[] args) {
        try {
            // Step 1: Download the ChromeDriver ZIP
            String zipUrl = "https://example.com/chromedriver.zip"; // Replace with the actual URL
            String downloadPath = "chromedriver.zip";
            System.out.println("Downloading ChromeDriver...");
            downloadFile(zipUrl, downloadPath);
            System.out.println("ChromeDriver ZIP downloaded: " + downloadPath);

            // Step 2: Extract the ZIP
            String outputDir = "chromedriver_extracted";
            System.out.println("Extracting ChromeDriver...");
            unzipFile(downloadPath, outputDir);
            System.out.println("ChromeDriver extracted to: " + outputDir);

            // Step 3: Locate and copy chromedriver.exe
            String targetPath = "C:\\ProgramData\\chromedriver.exe";
            copyChromeDriver(outputDir, targetPath);
            System.out.println("ChromeDriver copied to: " + targetPath);

        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    // Step 1: Download the ZIP file
    public static void downloadFile(String fileURL, String saveFilePath) throws IOException {
        HttpURLConnection connection = (HttpURLConnection) new URL(fileURL).openConnection();
        connection.setRequestMethod("GET");

        if (connection.getResponseCode() == HttpURLConnection.HTTP_OK) {
            try (InputStream inputStream = connection.getInputStream();
                 FileOutputStream outputStream = new FileOutputStream(saveFilePath)) {
                byte[] buffer = new byte[4096];
                int bytesRead;
                while ((bytesRead = inputStream.read(buffer)) != -1) {
                    outputStream.write(buffer, 0, bytesRead);
                }
            }
        } else {
            throw new IOException("Failed to download file: " + connection.getResponseCode());
        }
    }

    // Step 2: Extract the ZIP file, including subfolders
    public static void unzipFile(String zipFilePath, String destDir) throws IOException {
        File destDirectory = new File(destDir);
        if (!destDirectory.exists()) {
            destDirectory.mkdirs();
        }

        try (ZipInputStream zipIn = new ZipInputStream(new FileInputStream(zipFilePath))) {
            ZipEntry entry = zipIn.getNextEntry();
            while (entry != null) {
                File file = new File(destDir, entry.getName());
                if (entry.isDirectory()) {
                    file.mkdirs();
                } else {
                    new File(file.getParent()).mkdirs();
                    try (BufferedOutputStream bos = new BufferedOutputStream(new FileOutputStream(file))) {
                        byte[] buffer = new byte[4096];
                        int bytesRead;
                        while ((bytesRead = zipIn.read(buffer)) != -1) {
                            bos.write(buffer, 0, bytesRead);
                        }
                    }
                }
                zipIn.closeEntry();
                entry = zipIn.getNextEntry();
            }
        }
    }

    // Step 3: Locate and copy chromedriver.exe
    public static void copyChromeDriver(String extractedDir, String targetPath) throws IOException {
        // Search for chromedriver.exe in the extracted folder
        File extractedFolder = new File(extractedDir);

        // Use recursive search to find chromedriver.exe in nested folders
        File chromedriverFile = findFile(extractedFolder, "chromedriver.exe");

        if (chromedriverFile == null) {
            throw new FileNotFoundException("chromedriver.exe not found in extracted folder: " + extractedDir);
        }

        // Copy chromedriver.exe to the target location
        Files.copy(chromedriverFile.toPath(), Paths.get(targetPath), StandardCopyOption.REPLACE_EXISTING);
    }

    // Recursive method to locate a specific file within nested folders
    public static File findFile(File folder, String fileName) {
        if (folder.isDirectory()) {
            for (File file : folder.listFiles()) {
                if (file.isDirectory()) {
                    File found = findFile(file, fileName);
                    if (found != null) {
                        return found;
                    }
                } else if (file.getName().equalsIgnoreCase(fileName)) {
                    return file;
                }
            }
        }
        return null;
    }
}





import java.io.File;
import java.io.IOException;
import java.nio.file.*;

public class CopyFiles {

    public static void main(String[] args) {
        // Source folder (unzipped folder)
        String sourceFolder = "path/to/extracted_folder"; // Replace with your source folder
        // Destination folder
        String destinationFolder = "path/to/destination_folder"; // Replace with your destination folder

        try {
            copyFolder(Paths.get(sourceFolder), Paths.get(destinationFolder));
            System.out.println("All files copied from " + sourceFolder + " to " + destinationFolder);
        } catch (IOException e) {
            System.err.println("Error while copying files: " + e.getMessage());
            e.printStackTrace();
        }
    }

    /**
     * Recursively copies all files and subfolders from the source folder to the destination folder.
     *
     * @param source      The path to the source folder.
     * @param destination The path to the destination folder.
     * @throws IOException If an I/O error occurs.
     */
    public static void copyFolder(Path source, Path destination) throws IOException {
        // Ensure the destination folder exists
        if (!Files.exists(destination)) {
            Files.createDirectories(destination);
        }

        // Walk through the source folder tree
        Files.walk(source).forEach(sourcePath -> {
            try {
                Path targetPath = destination.resolve(source.relativize(sourcePath));
                if (Files.isDirectory(sourcePath)) {
                    // Create directories in the destination
                    if (!Files.exists(targetPath)) {
                        Files.createDirectories(targetPath);
                    }
                } else {
                    // Copy files
                    Files.copy(sourcePath, targetPath, StandardCopyOption.REPLACE_EXISTING);
                }
            } catch (IOException e) {
                throw new RuntimeException("Failed to copy: " + sourcePath.toString(), e);
            }
        });
    }
}






import java.io.*;
import java.nio.file.*;
import java.util.zip.ZipEntry;
import java.util.zip.ZipInputStream;

public class UnzipWithRewrite {

    public static void main(String[] args) {
        // Path to the ZIP file
        String zipFilePath = "path/to/yourfile.zip"; // Replace with the actual ZIP file path
        // Destination folder to unzip
        String destDir = "path/to/extracted_folder"; // Replace with the actual extraction path

        try {
            System.out.println("Preparing to extract ZIP file...");
            unzipWithRewrite(zipFilePath, destDir);
            System.out.println("ZIP file extracted to: " + destDir);
        } catch (IOException e) {
            System.err.println("An error occurred during extraction: " + e.getMessage());
            e.printStackTrace();
        }
    }

    /**
     * Unzips a ZIP file, rewriting the contents if the destination folder already exists.
     *
     * @param zipFilePath The path to the ZIP file.
     * @param destDir     The destination directory where files will be extracted.
     * @throws IOException If an I/O error occurs.
     */
    public static void unzipWithRewrite(String zipFilePath, String destDir) throws IOException {
        File destDirectory = new File(destDir);

        // If the destination directory exists, delete it and its contents
        if (destDirectory.exists()) {
            System.out.println("Destination folder already exists. Deleting...");
            deleteFolder(destDirectory);
        }

        // Create a fresh destination directory
        destDirectory.mkdirs();

        // Extract the ZIP file
        try (ZipInputStream zipIn = new ZipInputStream(new FileInputStream(zipFilePath))) {
            ZipEntry entry = zipIn.getNextEntry();
            while (entry != null) {
                File file = new File(destDir, entry.getName());
                if (entry.isDirectory()) {
                    file.mkdirs(); // Create directories
                } else {
                    new File(file.getParent()).mkdirs(); // Ensure parent directories exist
                    try (BufferedOutputStream bos = new BufferedOutputStream(new FileOutputStream(file))) {
                        byte[] buffer = new byte[4096];
                        int bytesRead;
                        while ((bytesRead = zipIn.read(buffer)) != -1) {
                            bos.write(buffer, 0, bytesRead);
                        }
                    }
                }
                zipIn.closeEntry();
                entry = zipIn.getNextEntry();
            }
        }
    }

    /**
     * Deletes a folder and all its contents recursively.
     *
     * @param folder The folder to delete.
     * @throws IOException If an I/O error occurs while deleting files.
     */
    public static void deleteFolder(File folder) throws IOException {
        if (folder.isDirectory()) {
            for (File file : folder.listFiles()) {
                deleteFolder(file); // Recursively delete subfolders and files
            }
        }
        Files.delete(folder.toPath()); // Delete the folder itself
    }
}
