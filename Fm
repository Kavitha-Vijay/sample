import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

import java.io.*;
import org.junit.jupiter.api.Test;
import org.mockito.Mockito;

class BrowserVersionFinderTest {

    @Test
    void testGetBrowserVersion_ValidResponse() throws Exception {
        // Mock the process and output stream
        Process mockProcess = mock(Process.class);
        InputStream mockInputStream = new ByteArrayInputStream("Version \n131.234.3445.99 \n".getBytes());
        BufferedReader mockBufferedReader = new BufferedReader(new InputStreamReader(mockInputStream));

        // Mock Runtime and Process
        Runtime mockRuntime = mock(Runtime.class);
        when(mockRuntime.exec(any(String[].class))).thenReturn(mockProcess);
        when(mockProcess.getInputStream()).thenReturn(mockInputStream);

        // Inject the mock runtime
        Runtime originalRuntime = Runtime.getRuntime();
        try {
            Runtime.setRuntime(mockRuntime);
            String version = BrowserVersionFinder.getBrowserVersion("C:\\\\Program Files\\\\Google\\\\Chrome\\\\Application\\\\chrome.exe");
            assertEquals("131.234.3445.99", version);
        } finally {
            Runtime.setRuntime(originalRuntime);
        }
    }

    @Test
    void testGetBrowserVersion_NoVersionFound() throws Exception {
        // Mock process returning only "Version" with no actual version data
        Process mockProcess = mock(Process.class);
        InputStream mockInputStream = new ByteArrayInputStream("Version\n".getBytes());
        when(mockProcess.getInputStream()).thenReturn(mockInputStream);

        Runtime mockRuntime = mock(Runtime.class);
        when(mockRuntime.exec(any(String[].class))).thenReturn(mockProcess);

        Runtime originalRuntime = Runtime.getRuntime();
        try {
            Runtime.setRuntime(mockRuntime);
            String version = BrowserVersionFinder.getBrowserVersion("C:\\\\Program Files\\\\Google\\\\Chrome\\\\Application\\\\chrome.exe");
            assertEquals("Version not found", version);
        } finally {
            Runtime.setRuntime(originalRuntime);
        }
    }

    @Test
    void testGetBrowserVersion_CommandFailure() throws Exception {
        // Mock process throwing IOException
        Runtime mockRuntime = mock(Runtime.class);
        when(mockRuntime.exec(any(String[].class))).thenThrow(new IOException("Command execution failed"));

        Runtime originalRuntime = Runtime.getRuntime();
        try {
            Runtime.setRuntime(mockRuntime);
            String version = BrowserVersionFinder.getBrowserVersion("C:\\\\Program Files\\\\Google\\\\Chrome\\\\Application\\\\chrome.exe");
            assertEquals("Version not found", version);
        } finally {
            Runtime.setRuntime(originalRuntime);
        }
    }
}
