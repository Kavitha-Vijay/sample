import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

import java.io.File;
import java.io.IOException;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

class FileManagerTest {

    private FileManager fileManager;  // ✅ Real instance for `spy()`

    @Mock
    private Utilities utilities;  // ✅ Mocked Utilities class

    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this);
        fileManager = spy(new FileManager(utilities));  // ✅ Use `spy()` on a real instance
    }

    @Test
    void testVerifyDriverExists_InCurrentFolder() throws IOException {
        String path = "C:/drivers";
        String browser = "chrome";
        String destination = "C:/destination";
        String driverName = "chromedriver.exe";

        when(utilities.getDriverName(browser)).thenReturn(driverName);

        File mockFile = mock(File.class);
        when(mockFile.exists()).thenReturn(true);
        when(mockFile.getAbsolutePath()).thenReturn(path + "/" + driverName);

        doReturn(mockFile).when(fileManager).createFile(path, driverName);

        String result = fileManager.verifyDriverExists(path, browser, destination);

        assertEquals(path, result);
    }

    @Test
    void testVerifyDriverExists_DriverNotFound() {
        String path = "C:/drivers";
        String browser = "edge";
        String destination = "C:/destination";
        String driverName = "msedgedriver.exe";

        when(utilities.getDriverName(browser)).thenReturn(driverName);

        File mockCurrentDir = mock(File.class);
        when(mockCurrentDir.exists()).thenReturn(false);

        File mockParentDir = mock(File.class);
        when(mockParentDir.exists()).thenReturn(false);

        doReturn(mockCurrentDir).when(fileManager).createFile(path, driverName);
        doReturn(mockParentDir).when(fileManager).createFile(new File(path).getParent(), driverName);

        IOException exception = assertThrows(IOException.class, () -> {
            fileManager.verifyDriverExists(path, browser, destination);
        });

        assertTrue(exception.getMessage().contains("Driver not found"));
    }
}
