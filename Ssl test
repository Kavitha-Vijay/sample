import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

import java.net.HttpURLConnection;
import java.net.URL;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

class ArtifactoryServiceTest {

    @Mock
    private SSLHelper sslHelper;  // Correctly mock SSLHelper

    @Mock
    private Config config;  // Mock Config to provide API key

    @InjectMocks
    private ArtifactoryService artifactoryService; // Ensure mocks are injected into ArtifactoryService

    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this); // âœ… Important: Initializes all @Mock annotated fields
    }

    @Test
    void testValidateArtifactoryLocation_Success() throws Exception {
        // Mock URL and HttpURLConnection
        HttpURLConnection mockHttpConnection = mock(HttpURLConnection.class);
        URL mockUrl = mock(URL.class);
        when(mockUrl.openConnection()).thenReturn(mockHttpConnection);

        // Simulate HTTP OK response
        when(mockHttpConnection.getResponseCode()).thenReturn(HttpURLConnection.HTTP_OK);

        // Mock API key
        when(config.API_KEY).thenReturn("dummy-api-key");

        // Call the method
        boolean result = artifactoryService.validateArtifactoryLocation("http://mock-url.com");

        // Verify interactions and assertions
        verify(sslHelper, times(1)).disableSSLValidation(); // Ensure SSL is disabled
        verify(mockHttpConnection, times(1)).setRequestMethod("GET");
        verify(mockHttpConnection, times(1)).setRequestProperty("X-API-KEY", "dummy-api-key");

        assertTrue(result, "Validation should return true for HTTP 200");
    }
}
