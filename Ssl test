import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

import java.net.HttpURLConnection;
import java.net.URL;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

class ArtifactoryServiceTest {

    @Mock
    private SSLHelper sslHelper;  // Mock SSLHelper

    @Mock
    private HttpURLConnection mockHttpConnection;  // Mock HttpURLConnection

    @Mock
    private Config config;  // Mock Config (API key)

    @InjectMocks
    private ArtifactoryService artifactoryService; // Inject mocks into ArtifactoryService

    @BeforeEach
    void setUp() throws Exception {
        MockitoAnnotations.openMocks(this);  // Initialize mocks
        when(config.API_KEY).thenReturn("dummy-api-key");  // Mock API key
    }

    @Test
    void testValidateArtifactoryLocation_Success() throws Exception {
        // Mock URL and HttpURLConnection
        URL mockUrl = mock(URL.class);
        when(mockUrl.openConnection()).thenReturn(mockHttpConnection);

        // Simulate HTTP OK response
        when(mockHttpConnection.getResponseCode()).thenReturn(HttpURLConnection.HTTP_OK);

        // Call the method
        boolean result = artifactoryService.validateArtifactoryLocation("http://mock-url.com");

        // Verify interactions and assertions
        verify(sslHelper, times(1)).disableSSLValidation(); // Ensure SSL validation is disabled
        verify(mockHttpConnection, times(1)).setRequestMethod("GET");
        verify(mockHttpConnection, times(1)).setRequestProperty("X-API-KEY", "dummy-api-key");

        assertTrue(result, "Validation should return true for HTTP 200");
    }

    @Test
    void testValidateArtifactoryLocation_Failure() throws Exception {
        // Mock URL and HttpURLConnection
        URL mockUrl = mock(URL.class);
        when(mockUrl.openConnection()).thenReturn(mockHttpConnection);

        // Simulate HTTP NOT FOUND response
        when(mockHttpConnection.getResponseCode()).thenReturn(HttpURLConnection.HTTP_NOT_FOUND);

        // Call the method
        boolean result = artifactoryService.validateArtifactoryLocation("http://mock-url.com");

        // Verify interactions
        verify(sslHelper, times(1)).disableSSLValidation();
        verify(mockHttpConnection, times(1)).setRequestMethod("GET");

        assertFalse(result, "Validation should return false for HTTP 404");
    }

    @Test
    void testValidateArtifactoryLocation_ExceptionHandling() throws Exception {
        // Simulate an exception when opening the connection
        when(new URL(anyString())).thenThrow(new RuntimeException("Invalid URL"));

        // Call the method
        boolean result = artifactoryService.validateArtifactoryLocation("invalid-url");

        // Ensure method handles exception gracefully
        assertFalse(result, "Validation should return false when an exception occurs");
    }
}
