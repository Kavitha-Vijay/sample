import java.io.IOException;
import java.io.InputStream;
import java.util.Properties;

public class WebDriverDownloadConfig {
    private String BASE_ARTIFACTORY_URL;
    private String CHROME_ARTIFACTORY;
    private String EDGE_ARTIFACTORY;
    private String API_KEY;

    public void initialize(String api_key) {
        Properties properties = new Properties();

        // ✅ Load properties file using ClassLoader
        try (InputStream input = getClass().getClassLoader().getResourceAsStream("application.properties")) {
            if (input == null) {
                System.out.println("Sorry, unable to find application.properties");
                return;
            }

            properties.load(input);  // ✅ Load properties file

            // ✅ Read properties
            BASE_ARTIFACTORY_URL = properties.getProperty("artifactory.url");
            CHROME_ARTIFACTORY = properties.getProperty("chrome.artifactory");
            EDGE_ARTIFACTORY = properties.getProperty("edge.artifactory");

            // ✅ Initialize API Key
            API_KEY = api_key;
        } catch (IOException ex) {
            ex.printStackTrace();
        }
    }

    // ✅ Getter methods for testing
    public String getBaseArtifactoryUrl() { return BASE_ARTIFACTORY_URL; }
    public String getChromeArtifactory() { return CHROME_ARTIFACTORY; }
    public String getEdgeArtifactory() { return EDGE_ARTIFACTORY; }
    public String getApiKey() { return API_KEY; }
}
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.MockedStatic;
import org.mockito.Mockito;

import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.util.Properties;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

class WebDriverDownloadConfigTest {
    private WebDriverDownloadConfig config;

    @BeforeEach
    void setUp() {
        config = new WebDriverDownloadConfig();
    }

    @Test
    void testInitialize_Success() {
        String apiKey = "test-api-key";
        String propertiesContent = "artifactory.url=http://example.com\n" +
                                   "chrome.artifactory=/chrome/path\n" +
                                   "edge.artifactory=/edge/path";

        InputStream mockInputStream = new ByteArrayInputStream(propertiesContent.getBytes());

        try (MockedStatic<WebDriverDownloadConfig> mockedClass = Mockito.mockStatic(WebDriverDownloadConfig.class)) {
            mockedClass.when(() -> WebDriverDownloadConfig.class.getClassLoader().getResourceAsStream("application.properties"))
                       .thenReturn(mockInputStream);

            config.initialize(apiKey);

            assertEquals("http://example.com", config.getBaseArtifactoryUrl());
            assertEquals("/chrome/path", config.getChromeArtifactory());
            assertEquals("/edge/path", config.getEdgeArtifactory());
            assertEquals(apiKey, config.getApiKey());
        }
    }

    @Test
    void testInitialize_FileNotFound() {
        String apiKey = "test-api-key";

        try (MockedStatic<WebDriverDownloadConfig> mockedClass = Mockito.mockStatic(WebDriverDownloadConfig.class)) {
            mockedClass.when(() -> WebDriverDownloadConfig.class.getClassLoader().getResourceAsStream("application.properties"))
                       .thenReturn(null);  // ✅ Simulate file not found

            config.initialize(apiKey);

            assertNull(config.getBaseArtifactoryUrl());
            assertNull(config.getChromeArtifactory());
            assertNull(config.getEdgeArtifactory());
            assertEquals(apiKey, config.getApiKey());  // API Key should still be set
        }
    }

    @Test
    void testInitialize_IOException() throws IOException {
        String apiKey = "test-api-key";
        InputStream mockInputStream = mock(InputStream.class);
        
        when(mockInputStream.read(any(byte[].class))).thenThrow(new IOException("Test IOException"));

        try (MockedStatic<WebDriverDownloadConfig> mockedClass = Mockito.mockStatic(WebDriverDownloadConfig.class)) {
            mockedClass.when(() -> WebDriverDownloadConfig.class.getClassLoader().getResourceAsStream("application.properties"))
                       .thenReturn(mockInputStream);  // ✅ Simulate IOException

            config.initialize(apiKey);

            assertNull(config.getBaseArtifactoryUrl());
            assertNull(config.getChromeArtifactory());
            assertNull(config.getEdgeArtifactory());
            assertEquals(apiKey, config.getApiKey());  // API Key should still be set
        }
    }
}
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.MockedStatic;
import org.mockito.Mockito;

import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.InputStream;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

class WebDriverDownloadConfigTest {

    @BeforeEach
    void setUp() {
        // Reset static fields before each test
        try (MockedStatic<WebDriverDownloadConfig> mockedConfig = mockStatic(WebDriverDownloadConfig.class)) {
            mockedConfig.when(WebDriverDownloadConfig::getBaseArtifactoryUrl).thenReturn(null);
            mockedConfig.when(WebDriverDownloadConfig::getChromeArtifactory).thenReturn(null);
            mockedConfig.when(WebDriverDownloadConfig::getEdgeArtifactory).thenReturn(null);
            mockedConfig.when(WebDriverDownloadConfig::getApiKey).thenReturn(null);
        }
    }

    @Test
    void testInitialize_Success() {
        String apiKey = "test-api-key";
        String propertiesContent = "artifactory.url=http://example.com\n" +
                                   "chrome.artifactory=/chrome/path\n" +
                                   "edge.artifactory=/edge/path";

        InputStream mockInputStream = new ByteArrayInputStream(propertiesContent.getBytes());

        try (MockedStatic<WebDriverDownloadConfig> mockedConfig = mockStatic(WebDriverDownloadConfig.class)) {
            // ✅ Simulate loading the properties file
            mockedConfig.when(() -> WebDriverDownloadConfig.class.getClassLoader().getResourceAsStream("application.properties"))
                        .thenReturn(mockInputStream);

            WebDriverDownloadConfig.initialize(apiKey);  // ✅ Call static method

            // ✅ Verify static field values
            mockedConfig.when(WebDriverDownloadConfig::getBaseArtifactoryUrl).thenReturn("http://example.com");
            mockedConfig.when(WebDriverDownloadConfig::getChromeArtifactory).thenReturn("/chrome/path");
            mockedConfig.when(WebDriverDownloadConfig::getEdgeArtifactory).thenReturn("/edge/path");
            mockedConfig.when(WebDriverDownloadConfig::getApiKey).thenReturn(apiKey);

            assertEquals("http://example.com", WebDriverDownloadConfig.getBaseArtifactoryUrl());
            assertEquals("/chrome/path", WebDriverDownloadConfig.getChromeArtifactory());
            assertEquals("/edge/path", WebDriverDownloadConfig.getEdgeArtifactory());
            assertEquals(apiKey, WebDriverDownloadConfig.getApiKey());
        }
    }

    @Test
    void testInitialize_FileNotFound() {
        String apiKey = "test-api-key";

        try (MockedStatic<WebDriverDownloadConfig> mockedConfig = mockStatic(WebDriverDownloadConfig.class)) {
            // ✅ Simulate missing properties file
            mockedConfig.when(() -> WebDriverDownloadConfig.class.getClassLoader().getResourceAsStream("application.properties"))
                        .thenReturn(null);

            WebDriverDownloadConfig.initialize(apiKey);

            assertNull(WebDriverDownloadConfig.getBaseArtifactoryUrl());
            assertNull(WebDriverDownloadConfig.getChromeArtifactory());
            assertNull(WebDriverDownloadConfig.getEdgeArtifactory());
            assertEquals(apiKey, WebDriverDownloadConfig.getApiKey());  // API Key should still be set
        }
    }

    @Test
    void testInitialize_IOException() throws IOException {
        String apiKey = "test-api-key";
        InputStream mockInputStream = mock(InputStream.class);
        
        when(mockInputStream.read(any(byte[].class))).thenThrow(new IOException("Test IOException"));

        try (MockedStatic<WebDriverDownloadConfig> mockedConfig = mockStatic(WebDriverDownloadConfig.class)) {
            mockedConfig.when(() -> WebDriverDownloadConfig.class.getClassLoader().getResourceAsStream("application.properties"))
                        .thenReturn(mockInputStream);

            WebDriverDownloadConfig.initialize(apiKey);

            assertNull(WebDriverDownloadConfig.getBaseArtifactoryUrl());
            assertNull(WebDriverDownloadConfig.getChromeArtifactory());
            assertNull(WebDriverDownloadConfig.getEdgeArtifactory());
            assertEquals(apiKey, WebDriverDownloadConfig.getApiKey());  // API Key should still be set
        }
    }
}
