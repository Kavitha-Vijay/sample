using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text;
using System.Threading.Tasks;

namespace OctaneApiExample
{
    class Program
    {
        private static async Task<string> SignInAndGetSessionCookie(HttpClientHandler handler, string username, string password)
        {
            // Octane sign-in API URL
            string signInUrl = "https://octane-url/authentication/sign_in";

            // Prepare the sign-in JSON content
            string jsonContent = $"{{\"user\": \"{username}\", \"password\": \"{password}\"}}";
            HttpContent content = new StringContent(jsonContent, Encoding.UTF8, "application/json");

            // Initialize HttpClient with the provided handler
            using (HttpClient client = new HttpClient(handler))
            {
                // Send POST request to sign in
                HttpResponseMessage response = await client.PostAsync(signInUrl, content);

                if (response.IsSuccessStatusCode)
                {
                    // Get the session cookie from the response
                    IEnumerable<string> cookies;
                    if (response.Headers.TryGetValues("Set-Cookie", out cookies))
                    {
                        // Assuming the session cookie is the first one
                        string sessionCookie = cookies.FirstOrDefault();
                        if (!string.IsNullOrEmpty(sessionCookie))
                        {
                            return sessionCookie.Split(';')[0]; // Extract the cookie value before any other attributes
                        }
                    }
                    throw new Exception("Session cookie not found in the response.");
                }
                else
                {
                    throw new Exception($"Sign-in failed: {response.StatusCode} - {response.ReasonPhrase}");
                }
            }
        }

        static async Task Main(string[] args)
        {
            // Proxy settings
            var proxy = new WebProxy
            {
                Address = new Uri("http://your-proxy-address:proxy-port"),
                BypassProxyOnLocal = false,
                UseDefaultCredentials = false,
                Credentials = new NetworkCredential("proxy-username", "proxy-password")
            };

            var httpClientHandler = new HttpClientHandler
            {
                Proxy = proxy,
                PreAuthenticate = true,
                UseDefaultCredentials = false,
                Credentials = new NetworkCredential("proxy-username", "proxy-password"),
                CookieContainer = new CookieContainer()
            };

            // User credentials for Octane sign-in
            string username = "your-username";
            string password = "your-password";

            try
            {
                // Sign in and get the session cookie
                string sessionCookie = await SignInAndGetSessionCookie(httpClientHandler, username, password);

                // Add the session cookie to the handler's CookieContainer
                Uri baseAddress = new Uri("https://octane-url/");
                httpClientHandler.CookieContainer.Add(baseAddress, new Cookie("LWSSO_COOKIE_KEY", sessionCookie));

                // Initialize HttpClient with handler
                using (HttpClient client = new HttpClient(httpClientHandler))
                {
                    // Set custom headers
                    client.DefaultRequestHeaders.Accept.Add(new MediaTypeWithQualityHeaderValue("application/json")); // Assuming the response is in JSON
                    client.DefaultRequestHeaders.Add("Custom-Header", "CustomHeaderValue");

                    // Octane API URL to get tests
                    string apiUrl = "https://octane-url/api/shared_spaces/your_shared_space_id/workspaces/your_workspace_id/tests";

                    // Send GET request
                    HttpResponseMessage response = await client.GetAsync(apiUrl);

                    if (response.IsSuccessStatusCode)
                    {
                        string responseData = await response.Content.ReadAsStringAsync();
                        Console.WriteLine("Test results retrieved successfully.");
                        Console.WriteLine(responseData);
                    }
                    else
                    {
                        Console.WriteLine($"Error retrieving test results: {response.StatusCode} - {response.ReasonPhrase}");
                        string responseContent = await response.Content.ReadAsStringAsync();
                        Console.WriteLine($"Response content: {responseContent}");
                    }
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Exception occurred: {ex.Message}");
            }
        }
    }
}
