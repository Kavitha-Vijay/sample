import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.mockito.MockedStatic;

import java.io.*;
import java.net.HttpURLConnection;
import java.net.URL;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

class FileDownloaderTest {

    @Mock
    private SSLHelper sslHelper;

    @Mock
    private Config config;

    @Mock
    private HttpURLConnection mockHttpConnection;

    @Mock
    private URL mockUrl;

    @Mock
    private InputStream mockInputStream;

    private FileDownloader fileDownloader;  

    private final String fileURL = "http://example.com/testfile.zip";
    private final String saveDir = "/downloads/";

    @BeforeEach
    void setUp() throws Exception {
        MockitoAnnotations.openMocks(this);

        // ✅ Use a real instance but allow method stubbing
        fileDownloader = spy(new FileDownloader(sslHelper, config));

        when(mockUrl.openConnection()).thenReturn(mockHttpConnection);
        when(config.API_KEY).thenReturn("dummy-api-key");
    }

    @Test
    void testDownloadFile_Success() throws Exception {
        doNothing().when(sslHelper).disableSSLValidation();
        when(mockHttpConnection.getResponseCode()).thenReturn(HttpURLConnection.HTTP_OK);
        when(mockHttpConnection.getHeaderField("Content-Disposition")).thenReturn("attachment; filename=\"testfile.zip\"");
        when(mockHttpConnection.getInputStream()).thenReturn(new ByteArrayInputStream("Test file data".getBytes()));

        // ✅ Fix constructor mocking issue by specifying exact path
        try (MockedStatic<FileOutputStream> mockedFileOutputStream = mockStatic(FileOutputStream.class)) {
            mockedFileOutputStream.when(() -> new FileOutputStream("/downloads/testfile.zip")).thenReturn(mock(FileOutputStream.class));

            // ✅ Call method
            String downloadedFilePath = fileDownloader.downloadFile(fileURL, saveDir);

            assertEquals(saveDir + "testfile.zip", downloadedFilePath, "File should be saved with correct name");
        }
    }

    @Test
    void testDownloadFile_HttpError() throws Exception {
        when(mockHttpConnection.getResponseCode()).thenReturn(HttpURLConnection.HTTP_NOT_FOUND);

        IOException thrown = assertThrows(IOException.class, () -> fileDownloader.downloadFile(fileURL, saveDir));
        assertTrue(thrown.getMessage().contains("Failed to download file: HTTP response code 404"));
    }
}
