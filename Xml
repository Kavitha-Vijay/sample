using System;
using System.Collections.Generic;
using System.IO;
using System.Xml.Serialization;

[XmlRoot("test_result")]
public class TestResult
{
    [XmlAttribute("release_name")]
    public string ReleaseName { get; set; }

    [XmlArray("backlog_items")]
    [XmlArrayItem("backlog_item_ref")]
    public List<BacklogItemRef> BacklogItems { get; set; }

    [XmlArray("product_areas")]
    [XmlArrayItem("product_area_ref")]
    public List<ProductAreaRef> ProductAreas { get; set; }

    [XmlArray("test_fields")]
    [XmlArrayItem("test_field")]
    public List<TestField> TestFields { get; set; }

    [XmlArray("environment")]
    [XmlArrayItem("taxonomy")]
    public List<Taxonomy> Environment { get; set; }

    [XmlArray("test_runs")]
    [XmlArrayItem("test_run")]
    public List<TestRun> TestRuns { get; set; }

    // Serialization control for BacklogItems
    public bool ShouldSerializeBacklogItems()
    {
        return BacklogItems != null && BacklogItems.Count > 0;
    }

    // Serialization control for ProductAreas
    public bool ShouldSerializeProductAreas()
    {
        return ProductAreas != null && ProductAreas.Count > 0;
    }

    // Serialization control for TestFields
    public bool ShouldSerializeTestFields()
    {
        return TestFields != null && TestFields.Count > 0;
    }

    // Serialization control for Environment
    public bool ShouldSerializeEnvironment()
    {
        return Environment != null && Environment.Count > 0;
    }

    // Serialization control for TestRuns
    public bool ShouldSerializeTestRuns()
    {
        return TestRuns != null && TestRuns.Count > 0;
    }
}

public class BacklogItemRef
{
    [XmlAttribute("id")]
    public string Id { get; set; }

    // Serialization control for Id
    public bool ShouldSerializeId()
    {
        return !string.IsNullOrEmpty(Id);
    }
}

public class ProductAreaRef
{
    [XmlAttribute("id")]
    public string Id { get; set; }

    // Serialization control for Id
    public bool ShouldSerializeId()
    {
        return !string.IsNullOrEmpty(Id);
    }
}

public class TestField
{
    [XmlAttribute("type")]
    public string Type { get; set; }

    [XmlAttribute("value")]
    public string Value { get; set; }

    // Serialization control for Type and Value
    public bool ShouldSerializeType()
    {
        return !string.IsNullOrEmpty(Type);
    }

    public bool ShouldSerializeValue()
    {
        return !string.IsNullOrEmpty(Value);
    }
}

public class Taxonomy
{
    [XmlAttribute("type")]
    public string Type { get; set; }

    [XmlAttribute("value")]
    public string Value { get; set; }

    // Serialization control for Type and Value
    public bool ShouldSerializeType()
    {
        return !string.IsNullOrEmpty(Type);
    }

    public bool ShouldSerializeValue()
    {
        return !string.IsNullOrEmpty(Value);
    }
}

public class TestRun
{
    [XmlAttribute("module")]
    public string Module { get; set; }

    [XmlAttribute("package")]
    public string Package { get; set; }

    [XmlAttribute("class")]
    public string Class { get; set; }

    [XmlAttribute("name")]
    public string Name { get; set; }

    [XmlAttribute("status")]
    public string Status { get; set; }

    [XmlElement("error")]
    public Error Error { get; set; }

    // Serialization control for Error
    public bool ShouldSerializeError()
    {
        return Error != null && (Error.Type != null || Error.Message != null);
    }

    // Serialization control for other attributes
    public bool ShouldSerializeModule()
    {
        return !string.IsNullOrEmpty(Module);
    }

    public bool ShouldSerializePackage()
    {
        return !string.IsNullOrEmpty(Package);
    }

    public bool ShouldSerializeClass()
    {
        return !string.IsNullOrEmpty(Class);
    }

    public bool ShouldSerializeName()
    {
        return !string.IsNullOrEmpty(Name);
    }

    public bool ShouldSerializeStatus()
    {
        return !string.IsNullOrEmpty(Status);
    }
}

public class Error
{
    [XmlAttribute("type")]
    public string Type { get; set; }

    [XmlAttribute("message")]
    public string Message { get; set; }

    // Serialization control for Type and Message
    public bool ShouldSerializeType()
    {
        return !string.IsNullOrEmpty(Type);
    }

    public bool ShouldSerializeMessage()
    {
        return !string.IsNullOrEmpty(Message);
    }
}
