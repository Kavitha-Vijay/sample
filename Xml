using System;
using System.Collections.Generic;
using System.IO;
using System.Xml.Serialization;

public class BacklogItems
{
    // Define properties for backlog_items here if needed
}

public class TestField
{
    [XmlAttribute("type")]
    public string Type { get; set; }

    [XmlAttribute("value")]
    public string Value { get; set; }
}

public class TestFields
{
    [XmlElement("test_field")]
    public List<TestField> TestFieldsList { get; set; }
}

public class Taxonomy
{
    // Define properties for taxonomy here if needed
}

public class Environment
{
    [XmlElement("taxonomy")]
    public Taxonomy Taxonomy { get; set; }
}

public class TestRun
{
    [XmlAttribute("module")]
    public string Module { get; set; }

    [XmlAttribute("package")]
    public string Package { get; set; }

    [XmlAttribute("class")]
    public string Class { get; set; }

    [XmlAttribute("name")]
    public string Name { get; set; }

    [XmlAttribute("duration")]
    public string Duration { get; set; }

    [XmlAttribute("status")]
    public string Status { get; set; }

    [XmlAttribute("started")]
    public string Started { get; set; }
}

public class TestRuns
{
    [XmlElement("test_run")]
    public List<TestRun> TestRunList { get; set; }
}

[XmlRoot("test_results")]
public class TestResults
{
    [XmlElement("backlog_items")]
    public BacklogItems BacklogItems { get; set; }

    [XmlElement("test_fields")]
    public TestFields TestFields { get; set; }

    [XmlElement("environment")]
    public Environment Environment { get; set; }

    [XmlElement("test_runs")]
    public TestRuns TestRuns { get; set; }
}

public class Program
{
    public static void Main()
    {
        // Create an instance of TestResults and populate its properties
        TestResults testResults = new TestResults
        {
            BacklogItems = new BacklogItems
            {
                // Initialize backlog items properties here if needed
            },
            TestFields = new TestFields
            {
                TestFieldsList = new List<TestField>
                {
                    new TestField { Type = "dummy1", Value = "someValue1" },
                    new TestField { Type = "dummy2", Value = "someValue2" }
                }
            },
            Environment = new Environment
            {
                Taxonomy = new Taxonomy
                {
                    // Initialize taxonomy properties here if needed
                }
            },
            TestRuns = new TestRuns
            {
                TestRunList = new List<TestRun>
                {
                    new TestRun
                    {
                        Module = "/updatedModule1",
                        Package = "updatedPackage1",
                        Class = "UpdatedHelloWorldTest1",
                        Name = "updatedTestOne1",
                        Duration = "5",
                        Status = "Failed",
                        Started = "1430919299999"
                    },
                    new TestRun
                    {
                        Module = "/updatedModule2",
                        Package = "updatedPackage2",
                        Class = "UpdatedHelloWorldTest2",
                        Name = "updatedTestOne2",
                        Duration = "10",
                        Status = "Passed",
                        Started = "1430919300000"
                    }
                }
            }
        };

        try
        {
            // Serialize TestResults object to XML string
            string xml;
            using (StringWriter sw = new StringWriter())
            {
                XmlSerializer serializer = new XmlSerializer(typeof(TestResults));
                serializer.Serialize(sw, testResults);
                xml = sw.ToString();
            }

            // Output the XML string
            Console.WriteLine("Serialized XML:");
            Console.WriteLine(xml);

            // Deserialize XML string to TestResults object
            TestResults deserializedTestResults;
            using (StringReader sr = new StringReader(xml))
            {
                XmlSerializer serializer = new XmlSerializer(typeof(TestResults));
                deserializedTestResults = (TestResults)serializer.Deserialize(sr);
            }

            // Update values in the TestResults object
            deserializedTestResults.TestFields.TestFieldsList[0].Type = "newType1";
            deserializedTestResults.TestFields.TestFieldsList[0].Value = "newValue1";
            deserializedTestResults.TestRuns.TestRunList[0].Module = "/newModule1";
            deserializedTestResults.TestRuns.TestRunList[0].Package = "newPackage1";
            deserializedTestResults.TestRuns.TestRunList[0].Class = "NewHelloWorldTest1";
            deserializedTestResults.TestRuns.TestRunList[0].Name = "newTestOne1";
            deserializedTestResults.TestRuns.TestRunList[0].Duration = "15";
            deserializedTestResults.TestRuns.TestRunList[0].Status = "Passed";
            deserializedTestResults.TestRuns.TestRunList[0].Started = "1430919300001";

            // Serialize updated TestResults object back to XML string
            string updatedXml;
            using (StringWriter sw = new StringWriter())
            {
                XmlSerializer serializer = new XmlSerializer(typeof(TestResults));
                serializer.Serialize(sw, deserializedTestResults);
                updatedXml = sw.ToString();
            }

            // Output the updated XML string
            Console.WriteLine("Updated XML:");
            Console.WriteLine(updatedXml);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error updating XML: {ex.Message}");
        }
    }
}
