using System;
using System.IO;
using System.Xml.Serialization;
using Newtonsoft.Json;

[Serializable]
public class TestField
{
    [XmlAttribute("type")]
    public string Type { get; set; }

    [XmlAttribute("value")]
    public string Value { get; set; }
}

[Serializable]
public class Root
{
    [XmlElement("test-field")]
    public TestField TestField { get; set; }
}

public class Program
{
    public static void Main()
    {
        // JSON string
        string json = @"{
            ""test-field"": {
                ""type"": ""level"",
                ""value"": ""dummy""
            }
        }";

        // Deserialize JSON to C# object
        Root root = null;
        try
        {
            root = JsonConvert.DeserializeObject<Root>(json);
            if (root == null || root.TestField == null)
            {
                throw new InvalidOperationException("Deserialization resulted in null object or missing test-field.");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error deserializing JSON: {ex.Message}");
        }

        // Serialize the updated C# object to XML
        if (root != null)
        {
            try
            {
                XmlSerializer xmlSerializer = new XmlSerializer(typeof(Root));
                using StringWriter textWriter = new StringWriter();
                xmlSerializer.Serialize(textWriter, root);
                string xml = textWriter.ToString();

                // Output the XML string
                Console.WriteLine(xml);
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error serializing to XML: {ex.Message}");
            }
        }
        else
        {
            Console.WriteLine("Root object is null, skipping XML serialization.");
        }
    }
}
