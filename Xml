using System;
using System.Collections.Generic;
using System.IO;
using System.Xml.Serialization;

public class Error
{
    [XmlAttribute("type")]
    public string Type { get; set; }

    [XmlAttribute("message")]
    public string Message { get; set; }
}

public class TestRun
{
    [XmlAttribute("module")]
    public string Module { get; set; }

    [XmlAttribute("package")]
    public string Package { get; set; }

    [XmlAttribute("class")]
    public string Class { get; set; }

    [XmlAttribute("name")]
    public string Name { get; set; }

    [XmlAttribute("duration")]
    public string Duration { get; set; }

    [XmlAttribute("status")]
    public string Status { get; set; }

    [XmlAttribute("started")]
    public string Started { get; set; }

    // Optional error node if status is "Failed" or "Skipped"
    [XmlElement("error")]
    public Error Error { get; set; }
}

public class TestRuns
{
    [XmlElement("test_run")]
    public List<TestRun> TestRunList { get; set; }
}

[XmlRoot("test_results")]
public class TestResults
{
    [XmlElement("backlog_items")]
    public BacklogItems BacklogItems { get; set; }

    [XmlElement("test_fields")]
    public TestFields TestFields { get; set; }

    [XmlElement("environment")]
    public Environment Environment { get; set; }

    [XmlElement("test_runs")]
    public TestRuns TestRuns { get; set; }
}

public class Program
{
    public static void Main()
    {
        // Create an instance of TestResults and populate its properties
        TestResults testResults = new TestResults
        {
            BacklogItems = new BacklogItems(),
            TestFields = new TestFields(),
            Environment = new Environment(),
            TestRuns = new TestRuns
            {
                TestRunList = new List<TestRun>
                {
                    new TestRun
                    {
                        Module = "/updatedModule1",
                        Package = "updatedPackage1",
                        Class = "UpdatedHelloWorldTest1",
                        Name = "updatedTestOne1",
                        Duration = "5",
                        Status = "Failed",
                        Started = "1430919299999",
                        Error = new Error { Type = "Type1", Message = "Message1" }
                    },
                    new TestRun
                    {
                        Module = "/updatedModule2",
                        Package = "updatedPackage2",
                        Class = "UpdatedHelloWorldTest2",
                        Name = "updatedTestOne2",
                        Duration = "10",
                        Status = "Passed",
                        Started = "1430919300000"
                    },
                    new TestRun
                    {
                        Module = "/updatedModule3",
                        Package = "updatedPackage3",
                        Class = "UpdatedHelloWorldTest3",
                        Name = "updatedTestOne3",
                        Duration = "7",
                        Status = "Skipped",
                        Started = "1430919300001",
                        Error = new Error { Type = "Type2", Message = "Message2" }
                    }
                }
            }
        };

        try
        {
            // Serialize TestResults object to XML string
            string xml = SerializeToXml(testResults);
            Console.WriteLine("Serialized XML:");
            Console.WriteLine(xml);

            // Deserialize XML string to TestResults object
            TestResults deserializedTestResults = DeserializeFromXml(xml);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error updating XML: {ex.Message}");
        }
    }

    public static string SerializeToXml(TestResults testResults)
    {
        using (StringWriter sw = new StringWriter())
        {
            var ns = new XmlSerializerNamespaces();
            ns.Add("", ""); // Remove namespace

            XmlSerializer serializer = new XmlSerializer(typeof(TestResults));
            serializer.Serialize(sw, testResults, ns);
            return sw.ToString();
        }
    }

    public static TestResults DeserializeFromXml(string xml)
    {
        using (StringReader sr = new StringReader(xml))
        {
            XmlSerializer serializer = new XmlSerializer(typeof(TestResults));
            return (TestResults)serializer.Deserialize(sr);
        }
    }
}
