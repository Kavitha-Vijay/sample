using System;
using System.Collections.Generic;
using System.IO;
using System.Xml;
using System.Xml.Serialization;

public class BacklogItemRef
{
    [XmlAttribute("id")]
    public string Id { get; set; }

    [XmlAttribute("name")]
    public string Name { get; set; }
}

public class BacklogItem
{
    [XmlElement("backlog_item_ref")]
    public List<BacklogItemRef> BacklogItemRefs { get; set; }
}

public class BacklogItems
{
    [XmlElement("backlog_item")]
    public List<BacklogItem> BacklogItemList { get; set; }

    public bool ShouldSerializeBacklogItemList() // This method controls whether the element should be serialized
    {
        return BacklogItemList != null && BacklogItemList.Count > 0;
    }
}

public class TestField
{
    [XmlAttribute("type")]
    public string Type { get; set; }

    [XmlAttribute("value")]
    public string Value { get; set; }
}

public class TestFields
{
    [XmlElement("test_field")]
    public List<TestField> TestFieldsList { get; set; }
}

public class Taxonomy
{
    // Define properties for taxonomy here if needed
}

public class Environment
{
    [XmlElement("taxonomy")]
    public Taxonomy Taxonomy { get; set; }
}

public class TestRun
{
    [XmlAttribute("module")]
    public string Module { get; set; }

    [XmlAttribute("package")]
    public string Package { get; set; }

    [XmlAttribute("class")]
    public string Class { get; set; }

    [XmlAttribute("name")]
    public string Name { get; set; }

    [XmlAttribute("duration")]
    public string Duration { get; set; }

    [XmlAttribute("status")]
    public string Status { get; set; }

    [XmlAttribute("started")]
    public string Started { get; set; }
}

public class TestRuns
{
    [XmlElement("test_run")]
    public List<TestRun> TestRunList { get; set; }
}

[XmlRoot("test_results")]
public class TestResults
{
    [XmlElement("backlog_items")]
    public BacklogItems BacklogItems { get; set; }

    [XmlElement("test_fields")]
    public TestFields TestFields { get; set; }

    [XmlElement("environment")]
    public Environment Environment { get; set; }

    [XmlElement("test_runs")]
    public TestRuns TestRuns { get; set; }
}

public class Program
{
    public static void Main()
    {
        // Create an instance of TestResults and populate its properties
        TestResults testResults = new TestResults
        {
            BacklogItems = new BacklogItems
            {
                BacklogItemList = null // Set to null to test removal of backlog node
            },
            TestFields = new TestFields
            {
                TestFieldsList = new List<TestField>
                {
                    new TestField { Type = "dummy1", Value = "someValue1" },
                    new TestField { Type = "dummy2", Value = "someValue2" }
                }
            },
            Environment = new Environment
            {
                Taxonomy = new Taxonomy
                {
                    // Initialize taxonomy properties here if needed
                }
            },
            TestRuns = new TestRuns
            {
                TestRunList = new List<TestRun>
                {
                    new TestRun
                    {
                        Module = "/updatedModule1",
                        Package = "updatedPackage1",
                        Class = "UpdatedHelloWorldTest1",
                        Name = "updatedTestOne1",
                        Duration = "5",
                        Status = "Failed",
                        Started = "1430919299999"
                    },
                    new TestRun
                    {
                        Module = "/updatedModule2",
                        Package = "updatedPackage2",
                        Class = "UpdatedHelloWorldTest2",
                        Name = "updatedTestOne2",
                        Duration = "10",
                        Status = "Passed",
                        Started = "1430919300000"
                    }
                }
            }
        };

        try
        {
            // Serialize TestResults object to XML string
            string xml = SerializeToXml(testResults);
            Console.WriteLine("Serialized XML:");
            Console.WriteLine(xml);

            // Deserialize XML string to TestResults object
            TestResults deserializedTestResults = DeserializeFromXml(xml);

            // Update values in the TestResults object
            UpdateTestField(deserializedTestResults.TestFields.TestFieldsList[0], "newType1", "newValue1");
            UpdateTestRun(deserializedTestResults.TestRuns.TestRunList[0], "/newModule1", "newPackage1", "NewHelloWorldTest1", "newTestOne1", "15", "Passed", "1430919300001");

            // Serialize updated TestResults object back to XML string
            string updatedXml = SerializeToXml(deserializedTestResults);
            Console.WriteLine("Updated XML:");
            Console.WriteLine(updatedXml);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error updating XML: {ex.Message}");
        }
    }

    public static string SerializeToXml(TestResults testResults)
    {
        using (StringWriter sw = new StringWriter())
        {
            var settings = new XmlWriterSettings
            {
                OmitXmlDeclaration = true,
                Indent = true
            };

            var ns = new XmlSerializerNamespaces();
            ns.Add("", ""); // Remove namespace

            XmlSerializer serializer = new XmlSerializer(typeof(TestResults));
            using (XmlWriter writer = XmlWriter.Create(sw, settings))
            {
                serializer.Serialize(writer, testResults, ns);
            }
            return sw.ToString();
        }
    }

    public static TestResults DeserializeFromXml(string xml)
    {
        using (StringReader sr = new StringReader(xml))
        {
            XmlSerializer serializer = new XmlSerializer(typeof(TestResults));
            return (TestResults)serializer.Deserialize(sr);
        }
    }

    public static void UpdateTestField(TestField testField, string newType, string newValue)
    {
        testField.Type = newType;
        testField.Value = newValue;
    }

    public static void UpdateTestRun(TestRun testRun, string newModule, string newPackage, string newClass, string newName, string newDuration, string newStatus, string newStarted)
    {
        testRun.Module = newModule;
        testRun.Package = newPackage;
        testRun.Class = newClass;
        testRun.Name = newName;
        testRun.Duration = newDuration;
        testRun.Status = newStatus;
        testRun.Started = newStarted;
    }
}
