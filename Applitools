using System;
using System.Threading.Tasks;
using Applitools;
using Applitools.Playwright;
using Microsoft.Playwright;

namespace PlaywrightApplitoolsLibDemo
{
    public class ApplitoolsLibrary
    {
        private Eyes _eyes;
        private IPage _page;
        private string _appName;
        private string _testName;

        public ApplitoolsLibrary(string apiKey)
        {
            _eyes = new Eyes();
            _eyes.ApiKey = apiKey;
        }

        // Method to initialize Playwright and Applitools Eyes
        public async Task InitializePlaywrightAndApplitoolsAsync(string browserType = "chromium", string appName = "Default App", string testName = "Default Test")
        {
            _appName = appName;
            _testName = testName;

            var playwright = await Playwright.CreateAsync();
            IBrowser browser;

            switch (browserType.ToLower())
            {
                case "chromium":
                    browser = await playwright.Chromium.LaunchAsync(new BrowserTypeLaunchOptions { Headless = true });
                    break;
                case "firefox":
                    browser = await playwright.Firefox.LaunchAsync(new BrowserTypeLaunchOptions { Headless = true });
                    break;
                case "webkit":
                    browser = await playwright.Webkit.LaunchAsync(new BrowserTypeLaunchOptions { Headless = true });
                    break;
                default:
                    throw new ArgumentException($"Unsupported browser type: {browserType}");
            }

            var context = await browser.NewContextAsync();
            _page = await context.NewPageAsync();
        }

        // Method to start visual testing
        public void StartVisualTest()
        {
            var eyesDriver = new PlaywrightEyes(_eyes, _page);
            _eyes.Open(eyesDriver, _appName, _testName);
        }

        // Method to navigate to a URL and capture a screenshot
        public async Task CaptureScreenshotAsync(string url, string checkpointName)
        {
            await _page.GotoAsync(url);
            _eyes.CheckWindow(checkpointName);
        }

        // Method to close the Applitools test and upload results
        public void EndVisualTest()
        {
            _eyes.Close();
        }

        // Method to clean up resources
        public async Task CleanupAsync()
        {
            await _page.Context.Browser.CloseAsync();
            _eyes.AbortIfNotClosed();
        }
    }
}
